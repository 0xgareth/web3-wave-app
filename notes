HARDHAT
    What is hardhat?
        development env to compile/test/deploy/debug eth software
        comes w/ hardhat network - local eth network for development

    HRE (hardhat runtime environment)
        object containing functionality exposed when running tasks/tests/scripts
            hardhat is really the HRE
        before running task/test/script hardhat injects HRE into global scope making its fields global vars
        you can extend the HRE to expose pacakges/libraries within the HRE object at runtime
            done by adding to hardhat config

    npx hardhat <task name>                             - executes the task in hardhat.config (e.g. accounts )
    npx hardhat run <script name>                       - execute script (e.g. run / deploy)
    npx hardhat node                                    - runs a local hardhat network
    npx hardhat run <script name> --network localhost   - runs a script against local hardhat network
    npx hardhat run <script name> --network rinkeby     - runs a script against rinkeby network (e.g. scripts/deploy.js)

ALCHEMY
    offers a simple method to deploy to ethereum blockchain
    since deploying a smart contract requires a transaction (to make contract accessible on chain)
        alchemy helps to broadcast the app/contract to miners

ETHEREUM
    EVM 
        underlying VM whose state everyone on the network agrees on - a copy is kept by all participants (all eth nodes)
        execution of transaction requests causes state changes to the EVM > they are committed and propagated through the network

    Smart contracts
        small executable programs that when called with specified parameters perform actions/computation
        the blockchain is used as the data layer for a fee paid to the network
        thus with smart contracts > developers can build/deploy comples user-facing apps/services

    Accounts
        accounts and balances are stored in a large table in the EVM > part of overall EVM state

    Transactions
        transaction request - formal name for request for code execution (smart contract execution on the EVM)
        transaction         - fulfilled transaction request and the change in EVM state
                            - requires validation, execution and 'committment to network' by another node
                            
BITCOIN AS A STATE TRANSITION SYSTEM
    a ledger can be viewed as a state transition system in that: 
        - it has a 'state' (ownership status of all bitcoins)
        - it has a state transition function that takes state & a transaction, and outputs the new state

PoW
    the mathematical work required to validate a block involves a lot of computing power, making it difficult for attackers to create a longer chain the 'pure' one
    the work done involves modifying the nonce such that the hash meets a certain condition
    given SHA256 is pseudorandom, the only method to create a valid block is brute force/trial and error (increment nonce to see if hash matches)
    
    this PoW helps to secure the network and prevent double spend 
        the part of the network not secured by cryptography is the order of transactions
        if a hacker wanted to change this, they'd need to make a modification to a block, invalidating all following blocks
            this creates two seperate forks (valid and false)
        since the longest chain is taken as truth, 51% of the networks power is required to make the fals fork longer than the valid
